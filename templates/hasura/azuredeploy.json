{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 20,
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name for the deployment resources."
      }
    },
    "hostingPlanSku": {
      "type": "string",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P1V2",
        "P2V2",
        "P3V2",
        "I1",
        "I2",
        "I3"
      ],
      "defaultValue": "S1"
    },
    "environmentVariables": {
      "type": "secureObject"
    },
    "hostingPlanInstanceCount": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10,
      "defaultValue": 1
    },
    "postgresVersion": {
      "type": "string",
      "defaultValue": "11",
      "allowedValues": [
        "11",
        "10",
        "9.6",
        "9.5"
      ]
    },
    "postgresPricingTier": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "GeneralPurpose",
        "MemoryOptimized"
      ],
      "defaultValue": "GeneralPurpose",
      "metadata": {
        "description": "Azure database for PostgreSQL pricing tier."
      }
    },
    "postgresCPUCores": {
      "type": "int",
      "allowedValues": [
        2,
        4,
        8,
        16,
        32
      ],
      "defaultValue": 2,
      "metadata": {
        "description": "Azure database for PostgreSQL SKU capacity - number of cores."
      }
    },
    "postgresDiskSizeInMB": {
      "type": "int",
      "minValue": 5120,
      "maxValue": 4194304,
      "defaultValue": 10240,
      "metadata": {
        "description": "Azure database for PostgreSQL SKU storage size."
      }
    },
    "postgresAdminUsername": {
      "type": "string",
      "defaultValue": "hasura",
      "minLength": 4,
      "maxLength": 128,
      "metadata": {
        "description": "Administrator username for Postgres."
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "defaultValue": null,
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Administrator password for Postgres. Must be at least 8 characters in length, must contain characters from three of the following categories â€“ English uppercase letters, English lowercase letters, numbers (0-9), and non-alphanumeric characters (!, $, #, %, etc.)."
      }
    },
    "postgresDatabaseName": {
      "type": "string",
      "defaultValue": "hasura",
      "minLength": 4,
      "maxLength": 128,
      "metadata": {
        "description": "Name of the database to be created."
      }
    }
  },
  "variables": {
    "suffix": "[take(uniqueString(resourceGroup().id), 3)]",
    "location": "[resourceGroup().location]",
    "resourceName": "[take(toLower(parameters('resourceName')), 16)]",

    "containerImage": "hasura/graphql-engine:v2.0.0-alpha.9",

    "keyVaultName": "[concat('kv-', variables('resourceName'), '-', variables('suffix'))]",
    "kvSecretPsqlConnectionUrl": "[concat(variables('psqlServerName'), '--', concat(variables('psqlDBName'), '-URL'))]",

    "hostingPlanName": "[concat('plan-', variables('resourceName'), '-', variables('suffix'))]",
    "hostingPlanSku": "[parameters('hostingPlanSku')]",
    "hostingPlanInstanceCount": "[parameters('hostingPlanInstanceCount')]",
    "appName": "[concat('app-', variables('resourceName'), '-', variables('suffix'))]",
    "environmentVariables": "[parameters('environmentVariables')]",

    "psqlServerName": "[concat('psql-', variables('resourceName'), '-', variables('suffix'))]",
    "psqlAdminUser": "[parameters('postgresAdminUsername')]",
    "psqlAdminPassword": "[parameters('postgresAdminPassword')]",

    "psqlDBName": "[parameters('postgresDatabaseName')]",
    "psqlDBVersion": "[parameters('postgresVersion')]",
    "psqlDBSKUTier": "[parameters('postgresPricingTier')]",
    "psqlDBSKUCapacity": "[parameters('postgresCPUCores')]",
    "psqlDBSKUSizeInMB": "[parameters('postgresDiskSizeInMB')]",

    "vnetName": "[concat('vnet-', variables('resourceName'), '-', variables('suffix'))]",
    "vnetAddressPrefix": "10.0.0.0/16",
    "subnetName": "default",
    "subnetAddressPrefix": "10.0.0.0/24"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[variables('keyVaultName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appName'))]"
      ],
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('appName')), '2016-08-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('appName')), '2016-08-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "apiVersion": "2016-10-01",
          "name": "[variables('kvSecretPsqlConnectionUrl')]",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('psqlServerName'))]"
          ],
          "properties": {
            "value": "[concat(
              'postgres://',
              variables('psqlAdminUser'),
              '%40',variables('psqlServerName'),
              ':',variables('psqlAdminPassword'),
              '@',
              reference(resourceId('Microsoft.DBforPostgreSQL/servers', variables('psqlServerName')), '2017-12-01').fullyQualifiedDomainName,
              ':5432/',
              variables('psqlDBName')
            )]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[variables('vnetName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressPrefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql",
                  "locations": [
                    "[variables('location')]"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('hostingPlanSku')]",
        "capacity": "[variables('hostingPlanInstanceCount')]"
      },
      "kind": "linux",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": 1,
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('appName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "kind": "app,linux,container",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": true,
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "http20Enabled": true,
          "use32BitWorkerProcess": false, /* 64-bit platform */
          "webSocketsEnabled": true,
          "linuxFxVersion": "[concat('DOCKER|', variables('containerImage'))]",
          "appCommandLine": "graphql-engine serve --server-port 80"
        }
      },
      "resources": [
        {
          "type": "networkConfig",
          "apiVersion": "2018-02-01",
          "name": "virtualNetwork",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('appName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
          ],
          "properties": {
            "subnetResourceid": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
            "swiftSupported": true
          }
        },
        {
          "type": "config",
          "apiVersion": "2018-11-01",
          "name": "appsettings",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('appName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('kvSecretPsqlConnectionUrl'))]"
          ],
          "properties": "[union(
            createObject(
              'DOCKER_REGISTRY_SERVER_URL', 'https://index.docker.io',
              'HASURA_GRAPHQL_DATABASE_URL', concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('kvSecretPsqlConnectionUrl'))).secretUri, ')'),
              'WEBSITES_ENABLE_APP_SERVICE_STORAGE', 'false'
            ),
            variables('environmentVariables')
          )]"
        }
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[variables('psqlServerName')]",
      "location": "[variables('location')]",
      "properties": {
        "createMode": "Default",
        "version": "[variables('psqlDBVersion')]",
        "administratorLogin": "[variables('psqlAdminUser')]",
        "administratorLoginPassword": "[variables('psqlAdminPassword')]",
        "storageProfile": {
          "storageMB": "[variables('psqlDBSKUSizeInMB')]",
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled",
          "storageAutogrow": "Disabled"
        },
        "sslEnforcement": "Enabled",
        "minimalTlsVersion": "TLS1_2",
        "infrastructureEncryption": "Disabled",
        "publicNetworkAccess": "Enabled"
      },
      "sku": {
        "name": "[concat(
          if(equals(variables('psqlDBSKUTier'), 'Basic'), 'B',
          if(equals(variables('psqlDBSKUTier'), 'GeneralPurpose'), 'GP',
          if(equals(variables('psqlDBSKUTier'), 'MemoryOptimized'), 'MO', 'X'))),
          '_Gen5_', variables('psqlDBSKUCapacity')
        )]",
        "tier": "[variables('psqlDBSKUTier')]",
        "capacity": "[variables('psqlDBSKUCapacity')]",
        "size": "[variables('psqlDBSKUSizeInMB')]",
        "family": "Gen5"
      },
      "resources": [
        {
          "type": "databases",
          "apiVersion": "2017-12-01",
          "name": "[variables('psqlDBName')]",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('psqlServerName'))]"
          ],
          "properties": {
            "charset": "UTF8",
            "collation": "English_United States.1252"
          }
        },
        {
          "type": "virtualNetworkRules",
          "apiVersion": "2017-12-01",
          "name": "[variables('vnetName')]",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('psqlServerName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
          ],
          "properties": {
            "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
            "ignoreMissingVnetServiceEndpoint": true
          }
        }
      ]
    }
  ],
  "outputs": {}
}
